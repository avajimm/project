# -*- coding: utf-8 -*-
"""proto.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kWcci_jVoNcZQbq_k-gkqWztv6cVLd--

main functions
"""

# function to calculate price and time
def calc(times, cents, secs):
  return cents * times, round((secs * times)/60)

# function for vgg16 workload
def vgg16(opt):
  epochs = int(input('Please enter number of epochs'))
  
  if opt == 1:
    inst = str('t2.xlarge')
    price_of_epoch = 0.0084
    time_of_epoch = 162.7
    price, time = calc(epochs, price_of_epoch, time_of_epoch)
  if opt == 2:
    inst = str('t2.2xlarge')
    price_of_epoch = 0.0086
    time_of_epoch = 83.64
    price, time = calc(epochs, price_of_epoch, time_of_epoch)
    
  print_results(inst, time, price)

# function for linpack workload
def linpack(opt):

  problem_size = int(input('Please enter problem size from next values: 1000, 2000, 5000, 10 000, 15 000,\n 18 000, 20 000, 22 000, 25 000, 26 000, 27 000, 30 000, 35 000, 40 000, 45 000'))
  trials = int(input('Please enter number of trials'))
  price = 0

  if problem_size > 20000:
    
    inst = str('t2.xlarge')

    if problem_size == 22000:
      price_of_test = 0.00204429
      time_per_test = 48.9325
      price, time = calc(trials, price_of_test, time_per_test)

    elif problem_size == 25000:
      price_of_test = 0.00297103
      time_per_test = 71.115
      price, time = calc(trials, price_of_test, time_per_test)

    elif problem_size == 26000:
      price_of_test = 0.00334686
      time_per_test = 80.111
      price, time = calc(trials, price_of_test, time_per_test)

    elif problem_size == 27000:
      price_of_test = 0.00373894
      time_per_test = 89.496
      price, time = calc(trials, price_of_test, time_per_test)

    elif problem_size == 30000:
      price_of_test = 0.00512526
      time_per_test = 122.679
      price, time = calc(trials, price_of_test, time_per_test)

    elif problem_size == 35000:
      price_of_test = 0.00810623
      time_per_test = 194.032
      price, time = calc(trials, price_of_test, time_per_test)

    elif problem_size == 40000:
      price_of_test = 0.01206868
      time_per_test = 288.878
      price, time = calc(trials, price_of_test, time_per_test)

    elif problem_size == 45000:
      price_of_test = 0.01725468
      time_per_test = 413.011
      price, time = calc(trials, price_of_test, time_per_test)

    else: 
      print('Please enter the correct problem size')
      return 0

  elif opt == 2:
        
    inst = str('t2.xlarge')
    if problem_size == 1000:
      price_of_test = 0.00000029
      time_per_test = 0.007
      price, time = calc(trials, price_of_test, time_per_test)
      
    elif problem_size == 2000:
      price_of_test = 0.00000201
      time_per_test = 0.048
      price, time = calc(trials, price_of_test, time_per_test)

    elif problem_size == 5000:
      price_of_test = 0.00002578
      time_per_test = 0.617
      price, time = calc(trials, price_of_test, time_per_test)

    elif problem_size == 10000:
      price_of_test = 0.00019458
      time_per_test = 4.6575
      price, time = calc(trials, price_of_test, time_per_test)

    elif problem_size == 15000:
      price_of_test = 0.00065169
      time_per_test = 15.599
      price, time = calc(trials, price_of_test, time_per_test)

    elif problem_size == 18000:
      price_of_test = 0.00111463
      time_per_test = 26.68
      price, time = calc(trials, price_of_test, time_per_test)

    elif problem_size == 20000:
      price_of_test = 0.00152917
      time_per_test = 36.6025
      price, time = calc(trials, price_of_test, time_per_test) 

    else:
      print('Please enter the correct problem size')
      return 0

  elif opt == 1:
      
    if problem_size <= 5000:
      inst = str('t2.nano')
      if problem_size == 1000:
        price_of_test = 0.00000004
        time_per_test = 0.025
        price, time = calc(trials, price_of_test, time_per_test)

      elif problem_size == 2000:
        price_of_test = 0.00000027
        time_per_test = 0.169
        price, time = calc(trials, price_of_test, time_per_test)

      elif problem_size == 5000:
        price_of_test = 0.00000385
        time_per_test = 2.39
        price, time = calc(trials, price_of_test, time_per_test)

      else:
        print('Please enter the correct problem size')
        return 0

    elif problem_size == 10000:
      inst = str('t2.micro')
      price_of_test = 0.00005872
      time_per_test = 18.224
      price, time = calc(trials, price_of_test, time_per_test)

    elif problem_size == 15000:
      inst = str('t2.small')
      price_of_test = 0.00038699
      time_per_test = 60.572
      price, time = calc(trials, price_of_test, time_per_test)
    elif problem_size == 18000:
      inst = str('t2.medium')
      price_of_test = 0.00068385
      time_per_test = 53.057
      price, time = calc(trials, price_of_test, time_per_test)

    elif problem_size == 20000:
      inst = str('t2.medium')
      price_of_test = 0.00093505
      time_per_test = 72.547
      price, time = calc(trials, price_of_test, time_per_test)

    else:
      print('Please enter the correct problem size')
      return 0

  if price > 0:
    print_results(inst, time, price)
  else: 
    print('Please enter the correct problem size')
    return 0

# function for printing the results
def print_results(instance, time, price):
  print('The best choice for you would be: {0}, it will take aproximately {1} minutes and will cost aproximately {2} $'.format(instance, time, price))

# function for ffmpeg workload
def ffmpeg(opt):
  print('The best choice for you would be: t2.nano')

"""main program"""

def main():
  # inputs
  workload = int(input('Please enter your workload type: 1 for vgg16, 2 for ffmpeg, 3 for linpack'))
  option = int(input('Please enter your choice: 1 for "cheaper" or 2 for "faster"'))
# check if inputs are correct and then go into right branch of the tree
  if workload == 1 and (option == 1 or option == 2):
    vgg16(option)

  elif workload == 2 and (option == 1 or option == 2):
    ffmpeg(option)

  elif workload == 3 and (option == 1 or option == 2):
    n = 0
    while n == 0:
      n = linpack(option)

  else:
    print('Please enter the correct answer')
    main()

  responce = input('Do you want to start over? y/n')
  if responce == 'y' or responce == 'yes':
    main()

"""run the program"""

main()